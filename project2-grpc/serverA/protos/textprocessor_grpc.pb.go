// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: textprocessor.proto

package textprocessor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TextProcessorA_CountWords_FullMethodName = "/textprocessor.TextProcessorA/CountWords"
)

// TextProcessorAClient is the client API for TextProcessorA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextProcessorAClient interface {
	CountWords(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error)
}

type textProcessorAClient struct {
	cc grpc.ClientConnInterface
}

func NewTextProcessorAClient(cc grpc.ClientConnInterface) TextProcessorAClient {
	return &textProcessorAClient{cc}
}

func (c *textProcessorAClient) CountWords(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, TextProcessorA_CountWords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextProcessorAServer is the server API for TextProcessorA service.
// All implementations must embed UnimplementedTextProcessorAServer
// for forward compatibility.
type TextProcessorAServer interface {
	CountWords(context.Context, *TextRequest) (*TextResponse, error)
	mustEmbedUnimplementedTextProcessorAServer()
}

// UnimplementedTextProcessorAServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextProcessorAServer struct{}

func (UnimplementedTextProcessorAServer) CountWords(context.Context, *TextRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountWords not implemented")
}
func (UnimplementedTextProcessorAServer) mustEmbedUnimplementedTextProcessorAServer() {}
func (UnimplementedTextProcessorAServer) testEmbeddedByValue()                        {}

// UnsafeTextProcessorAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextProcessorAServer will
// result in compilation errors.
type UnsafeTextProcessorAServer interface {
	mustEmbedUnimplementedTextProcessorAServer()
}

func RegisterTextProcessorAServer(s grpc.ServiceRegistrar, srv TextProcessorAServer) {
	// If the following call pancis, it indicates UnimplementedTextProcessorAServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextProcessorA_ServiceDesc, srv)
}

func _TextProcessorA_CountWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextProcessorAServer).CountWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextProcessorA_CountWords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextProcessorAServer).CountWords(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextProcessorA_ServiceDesc is the grpc.ServiceDesc for TextProcessorA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextProcessorA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "textprocessor.TextProcessorA",
	HandlerType: (*TextProcessorAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountWords",
			Handler:    _TextProcessorA_CountWords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "textprocessor.proto",
}

const (
	TextProcessorB_CountCharacters_FullMethodName = "/textprocessor.TextProcessorB/CountCharacters"
)

// TextProcessorBClient is the client API for TextProcessorB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextProcessorBClient interface {
	CountCharacters(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error)
}

type textProcessorBClient struct {
	cc grpc.ClientConnInterface
}

func NewTextProcessorBClient(cc grpc.ClientConnInterface) TextProcessorBClient {
	return &textProcessorBClient{cc}
}

func (c *textProcessorBClient) CountCharacters(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextResponse)
	err := c.cc.Invoke(ctx, TextProcessorB_CountCharacters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextProcessorBServer is the server API for TextProcessorB service.
// All implementations must embed UnimplementedTextProcessorBServer
// for forward compatibility.
type TextProcessorBServer interface {
	CountCharacters(context.Context, *TextRequest) (*TextResponse, error)
	mustEmbedUnimplementedTextProcessorBServer()
}

// UnimplementedTextProcessorBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTextProcessorBServer struct{}

func (UnimplementedTextProcessorBServer) CountCharacters(context.Context, *TextRequest) (*TextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCharacters not implemented")
}
func (UnimplementedTextProcessorBServer) mustEmbedUnimplementedTextProcessorBServer() {}
func (UnimplementedTextProcessorBServer) testEmbeddedByValue()                        {}

// UnsafeTextProcessorBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextProcessorBServer will
// result in compilation errors.
type UnsafeTextProcessorBServer interface {
	mustEmbedUnimplementedTextProcessorBServer()
}

func RegisterTextProcessorBServer(s grpc.ServiceRegistrar, srv TextProcessorBServer) {
	// If the following call pancis, it indicates UnimplementedTextProcessorBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TextProcessorB_ServiceDesc, srv)
}

func _TextProcessorB_CountCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextProcessorBServer).CountCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextProcessorB_CountCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextProcessorBServer).CountCharacters(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextProcessorB_ServiceDesc is the grpc.ServiceDesc for TextProcessorB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextProcessorB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "textprocessor.TextProcessorB",
	HandlerType: (*TextProcessorBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountCharacters",
			Handler:    _TextProcessorB_CountCharacters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "textprocessor.proto",
}
